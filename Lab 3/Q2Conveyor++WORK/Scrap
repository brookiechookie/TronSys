//IndiItem *theNewItem = new IndiItem( ItemsBeingAdded );
//        //ItemParent  NewItem( ItemsBeingAdded );
//NewItem.ItemParent( ItemsBeingAdded );

//IndiItem NewItem( ItemsBeingAdded );

/*
for( int i = 1; i <= ItemsBeingAdded; i++ )
{
    int _ItemID = rand() % 999;
    myVector.push_back( _ItemID );

    std::cout << "[Main]: New Item " << i << " added to HugeVec. Item ID: " <<
    _ItemID << std::endl;
}
print_container( myVector );
*/




/*
        int ItemsRemoving = myProcessor.GetProcessedItems();
        std::cout << "[Main]: The number of items to remove is " << ItemsRemoving << std::endl;
        for( int i = 0; i < ItemsRemoving; i++ )
        {
            std::cout << "[Main]: Index " << i << ", Item ID " << myVector.at(i) <<
            " is being removed" << std::endl;

        }
        myVector.erase( myVector.begin(), myVector.begin() + ItemsRemoving );
        print_container( myVector );
*/

        //myItem->DeleshItems();
